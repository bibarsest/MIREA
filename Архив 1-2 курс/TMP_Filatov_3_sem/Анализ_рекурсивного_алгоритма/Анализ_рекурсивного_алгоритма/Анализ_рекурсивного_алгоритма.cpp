#include <stdio.h>
#include <conio.h>
#include "iostream"
#include <windows.h>

#define VAR 834 

long long k = 2 /*5*/, N, r, q, N_op, k_0 = 1;

long long f(int n)
{
	if (n >= k)			// k - порядок рекурсии
	{				// внутренний узел дерева рекурсии
		r++;		// Подсчет числа внутренних узлов дерева рекурсии			

		// здесь указать рекуррентную формулу роста трудоемкости алгоритма:
		return 62 + 15*n + f(n - 1) + f(n - 2) + f(n - 2) + f(n - 2) + f(n - 2) + f(n - 2) + f(n - 2);
	}
	else 				// начальное условие, лист дерева рекурсии
	{
		q++;		// Подсчет числа листьев дерева рекурсии						

		// здесь указать формулу роста трудоемкости алгоритма в листьях дерева рекрсии
		return 5 + 15 * n;
	}
}

int main(void)
{
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);

	std::cout << "\n";

	int N, 			// Глубина рекурсии
		N_max;		// Максимальная глубина рекурсии	
	N_max = 30;  /*3*/ // Указать значение, такое что время работы рекурсивного алгоритма 
	//	составляло бы порядок 10^14 числа операций
	long long t1, t2;

	for (N = 0; N <= N_max; N++)
	{
		r = 0; 		 // Общее количество внутренних узлов
		q = 0; 		 // Общее количество листьев
		t1 = GetTickCount64();	// фиксируем момент начала выполнения рекурсивной функции

		N_op = f(N); // Общее количество инструкций

		t2 = GetTickCount64();	// фиксируем момент завершения выполнения рекурсивной функции
		std::cout << "  N = " << N << " r = " << r << " q = " << q << " r+q = " << r + q;
		std::cout << " N_op = " << N_op << " T = " << t2 - t1 << "\n";
	}
	std::cout << "\n Для завершения нажмите любую клавишу...";
	_getch();

}
